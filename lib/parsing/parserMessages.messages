file: TIMES
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
##
##

expected an expression

file: NOT TIMES
##
## Ends in an error in state: 2.
##
## expr -> NOT . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## NOT
##

expected an expression after '!'

file: MINUS TIMES
##
## Ends in an error in state: 3.
##
## expr -> MINUS . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

expected an expression after '-' 

file: LPAREN TIMES
##
## Ends in an error in state: 4.
##
## simple_expr -> LPAREN . expr RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

expected an expression after '(' 

file: LET TRUE
##
## Ends in an error in state: 5.
##
## expr -> LET . ID EQUAL expr IN expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> LET . REC and_bindings IN expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET
##

expected an identifier after 'let' 

file: LET ID TRUE
##
## Ends in an error in state: 54.
##
## expr -> LET ID . EQUAL expr IN expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET ID
##

expected '=' after the identifier in a let binding

file: LET ID EQUAL TIMES
##
## Ends in an error in state: 55.
##
## expr -> LET ID EQUAL . expr IN expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET ID EQUAL
##

expected an expression after '=' in a let binding

file: IF TIMES
##
## Ends in an error in state: 10.
##
## expr -> IF . expr THEN expr ELSE expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF
##

expected an expression after 'if' 

file: FUN TRUE
##
## Ends in an error in state: 12.
##
## expr -> FUN . ID ARROW expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## FUN
##

expected an identifier after 'fun' 

file: FUN ID TRUE
##
## Ends in an error in state: 13.
##
## expr -> FUN ID . ARROW expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## FUN ID
##

expected '->' after the identifier in a function expression

file: FUN ID ARROW TIMES
##
## Ends in an error in state: 14.
##
## expr -> FUN ID ARROW . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## FUN ID ARROW
##

expected an expression after '->' in a function expression

file: FALSE TIMES TIMES
##
## Ends in an error in state: 24.
##
## expr -> expr TIMES . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

expected an expression after '*' 

file: FALSE NOT
##
## Ends in an error in state: 16.
##
## app_expr -> simple_expr . [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
## simple_expr -> simple_expr . DOT LPAREN INT RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## simple_expr
##

ill-formed expression

file: FALSE PLUS TIMES
##
## Ends in an error in state: 28.
##
## expr -> expr PLUS . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

expected an expression after '+'

file: FALSE MINUS TIMES
##
## Ends in an error in state: 30.
##
## expr -> expr MINUS . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

expected an expression after '-'

file: IF FALSE RPAREN
##
## Ends in an error in state: 41.
##
## expr -> expr . PLUS expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> IF expr . THEN expr ELSE expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES THEN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production app_expr -> simple_expr
## In state 26, spurious reduction of production expr -> app_expr
##

expected 'then' after the condition of an if expression

file: IF FALSE THEN TIMES
##
## Ends in an error in state: 42.
##
## expr -> IF expr THEN . expr ELSE expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

expected an expression after 'then' in an if expression

file: IF FALSE THEN FALSE THEN
##
## Ends in an error in state: 43.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> IF expr THEN expr . ELSE expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS EQUAL ELSE COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production app_expr -> simple_expr
## In state 26, spurious reduction of production expr -> app_expr
##

expected 'else' after the true branch in an if expression

file: FALSE LESS TIMES
##
## Ends in an error in state: 32.
##
## expr -> expr LESS . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr LESS
##

expected an expression after '<'


file: FALSE EQUAL TIMES
##
## Ends in an error in state: 34.
##
## expr -> expr EQUAL . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr EQUAL
##

expected an expression after '='

file: IF FALSE THEN FALSE ELSE TIMES
##
## Ends in an error in state: 44.
##
## expr -> IF expr THEN expr ELSE . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

expected an expression after 'else' in an if expression

file: LET ID EQUAL FALSE THEN
##
## Ends in an error in state: 56.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> LET ID EQUAL expr . IN expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET ID EQUAL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production app_expr -> simple_expr
## In state 26, spurious reduction of production expr -> app_expr
##

expected 'in' after the binding expression in a let binding

file: LET ID EQUAL FALSE IN TIMES
##
## Ends in an error in state: 57.
##
## expr -> LET ID EQUAL expr IN . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET ID EQUAL expr IN
##

expected an expression after 'in' in a let binding

file: LPAREN FALSE THEN
##
## Ends in an error in state: 59.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES RPAREN PLUS MINUS LESS EQUAL COMMA BARBAR AMPERSANDAMPERSAND ]
## simple_expr -> LPAREN expr . RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production app_expr -> simple_expr
## In state 26, spurious reduction of production expr -> app_expr
##

unclosed parenthesis, missing ')' after expression

file: FALSE THEN
##
## Ends in an error in state: 65.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
## file -> expr . EOF [ # ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS EQUAL EOF COMMA BARBAR AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production app_expr -> simple_expr
## In state 26, spurious reduction of production expr -> app_expr
##

expected expression

file: FALSE COMMA FALSE COMMA TIMES
##
## Ends in an error in state: 22.
##
## reversed_separated_nontrivial_llist(COMMA,expr) -> reversed_separated_nontrivial_llist(COMMA,expr) COMMA . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## reversed_separated_nontrivial_llist(COMMA,expr) COMMA
##

expected expression after ',' in a tuple

file: FALSE COMMA TIMES
##
## Ends in an error in state: 46.
##
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr COMMA . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

expected expression after ',' in a tuple

file: FALSE DOT TRUE
##
## Ends in an error in state: 17.
##
## simple_expr -> simple_expr DOT . LPAREN INT RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT
##

expected '(' after '.' in a tuple element access

file: FALSE DOT LPAREN TRUE
##
## Ends in an error in state: 18.
##
## simple_expr -> simple_expr DOT LPAREN . INT RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT LPAREN
##

expected a number after '(' in a tuple element access

file: FALSE DOT LPAREN INT TRUE
##
## Ends in an error in state: 19.
##
## simple_expr -> simple_expr DOT LPAREN INT . RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT LPAREN INT
##

expected ')' after index in tuple element access

file: FALSE FALSE NOT
##
## Ends in an error in state: 27.
##
## app_expr -> app_expr simple_expr . [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
## simple_expr -> simple_expr . DOT LPAREN INT RPAREN [ TRUE TIMES THEN RPAREN PLUS MINUS LPAREN LESS INT IN ID FALSE EQUAL EOF ELSE DOT COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## app_expr simple_expr
##

ill-formed expression

file: FALSE BARBAR TIMES
##
## Ends in an error in state: 36.
##
## expr -> expr BARBAR . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr BARBAR
##

expected expression after '&&'

file: FALSE AMPERSANDAMPERSAND TIMES
##
## Ends in an error in state: 38.
##
## expr -> expr AMPERSANDAMPERSAND . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## expr AMPERSANDAMPERSAND
##

expected expression after '&&'

file: LET REC TRUE
##
## Ends in an error in state: 6.
##
## expr -> LET REC . and_bindings IN expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET REC
##

expected binding after 'let rec'

file: LET REC ID TRUE
##
## Ends in an error in state: 7.
##
## and_bindings -> ID . EQUAL expr [ IN ]
## and_bindings -> ID . EQUAL expr AND and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID
##

expected '=' after identifier in binding

file: LET REC ID EQUAL TIMES
##
## Ends in an error in state: 8.
##
## and_bindings -> ID EQUAL . expr [ IN ]
## and_bindings -> ID EQUAL . expr AND and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID EQUAL
##

expected expression after '=' in binding

file: LET REC ID EQUAL FALSE THEN
##
## Ends in an error in state: 48.
##
## and_bindings -> ID EQUAL expr . [ IN ]
## and_bindings -> ID EQUAL expr . AND and_bindings [ IN ]
## expr -> expr . PLUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . EQUAL expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . LESS expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . AMPERSANDAMPERSAND expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## expr -> expr . BARBAR expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
## reversed_separated_nontrivial_llist(COMMA,expr) -> expr . COMMA expr [ TIMES PLUS MINUS LESS IN EQUAL COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## ID EQUAL expr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 16, spurious reduction of production app_expr -> simple_expr
## In state 26, spurious reduction of production expr -> app_expr
##

ill-formed expression after '=' in binding

file: LET REC ID EQUAL FALSE AND TRUE
##
## Ends in an error in state: 49.
##
## and_bindings -> ID EQUAL expr AND . and_bindings [ IN ]
##
## The known suffix of the stack is as follows:
## ID EQUAL expr AND
##

expected binding after 'and' in a mutually recursive binding

file: LET REC ID EQUAL FALSE IN TIMES
##
## Ends in an error in state: 52.
##
## expr -> LET REC and_bindings IN . expr [ TIMES THEN RPAREN PLUS MINUS LESS IN EQUAL EOF ELSE COMMA BARBAR AND AMPERSANDAMPERSAND ]
##
## The known suffix of the stack is as follows:
## LET REC and_bindings IN
##

expected expression after 'in' in a let binding
